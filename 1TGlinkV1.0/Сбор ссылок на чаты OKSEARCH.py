import pathlib
import json
import os
import re
import asyncio
import shutil
import logging
import csv
import io
import urllib.parse
import hashlib

from telegram import (
    Update,
    MessageEntity,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove,
    CallbackQuery,
    InputMediaPhoto
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler,
    ConversationHandler
)

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
BASE_DIR = pathlib.Path(__file__).resolve().parent
LOG_FILE_PATH = BASE_DIR / "bot_log.txt"

logging.basicConfig(
    filename=LOG_FILE_PATH,
    filemode='a',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
TOKEN = "7848203824:AAGVFRsilL9ibTboyE46Hx-gZJw1kIptAvI"
MIN_FILE = BASE_DIR / "–ú–ò–ù_–£–ß–ê–°–¢–ù–ò–ö–û–í.json"
ARCHIVE_DIR = pathlib.Path("C:\\–°–æ—Ñ—Ç\\1TGlinkV1.0\\–ê–†–•–ò–í")
TEMPLATES_DIR = pathlib.Path("C:\\–°–æ—Ñ—Ç\\1TGlinkV1.0\\–®–ê–ë–õ–û–ù–´")
FINAL_DEST_DIR = pathlib.Path("C:/–°–æ—Ñ—Ç/2Onlinechat_checker V1.0")

# --- –†–ê–ó–†–ï–®–ï–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ---
ALLOWED_USER_IDS = [6997178408] # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø

# --- –ö–õ–ò–ï–ù–¢–´: –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ü–ê–ü–ö–ò ---
CLIENTS_DIR = BASE_DIR / "–ö–õ–ò–ï–ù–¢–´"
ACTIVE_CLIENTS_DIR = CLIENTS_DIR / "–∞–∫—Ç–∏–≤–Ω—ã–µ"
ARCHIVED_CLIENTS_DIR = CLIENTS_DIR / "–∞—Ä—Ö–∏–≤"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
ARCHIVE_DIR.mkdir(parents=True, exist_ok=True)
FINAL_DEST_DIR.mkdir(parents=True, exist_ok=True)
TEMPLATES_DIR.mkdir(parents=True, exist_ok=True)
ACTIVE_CLIENTS_DIR.mkdir(parents=True, exist_ok=True)
ARCHIVED_CLIENTS_DIR.mkdir(parents=True, exist_ok=True)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def is_allowed_user(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ user_id –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö."""
    return user_id in ALLOWED_USER_IDS

def load_min_members() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤."""
    if MIN_FILE.exists():
        try:
            with open(MIN_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return {
                    "public_min_members": data.get("public_min_members", 0),
                    "private_min_members": data.get("private_min_members", 0)
                }
        except (json.JSONDecodeError, IOError):
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ú–ò–ù_–£–ß–ê–°–¢–ù–ò–ö–û–í.json", exc_info=True)
            pass
    return {"public_min_members": 0, "private_min_members": 0}

def save_min_members(public_value: int, private_value: int) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤."""
    with open(MIN_FILE, "w", encoding="utf-8") as f:
        json.dump({
            "public_min_members": public_value,
            "private_min_members": private_value
        }, f, ensure_ascii=False, indent=2)

def parse_member_count(text: str) -> int:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "-3.5k" -> 3500)."""
    text = str(text).replace('\xa0', ' ').replace('\u202f', ' ')
    if m := re.search(r"-?(\d+(?:[.,]\d+)?)k", text, re.I):
        try:
            return int(float(m.group(1).replace(",", ".")) * 1000)
        except ValueError:
            pass
    if m := re.search(r"-?(\d{1,7})", text):
        try:
            return int(m.group(1))
        except ValueError:
            pass
    return 0

def split_by_chat_type(links):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∏ –ø—É–±–ª–∏—á–Ω—ã–µ."""
    private = [u for u in links if u.startswith("https://t.me/+")]
    public = [u for u in links if u.startswith("https://t.me/") and not u.startswith("https://t.me/+")]
    return private, public

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    special_chars = r'_*[]()~`>#+-=|{}.!'
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

def main_menu_keyboard():
    buttons = [
        [KeyboardButton("–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º"), KeyboardButton("–ê–≤—Ç–æ —Ä–µ–∂–∏–º")],
        [KeyboardButton("–ê—Ä—Ö–∏–≤ —á–∞—Ç–æ–≤"), KeyboardButton("–®–∞–±–ª–æ–Ω—ã")],
        [KeyboardButton("–ö–ª–∏–µ–Ω—Ç—ã"), KeyboardButton("–û—Ç–±–æ—Ä —á–∞—Ç–æ–≤")]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

def manual_mode_keyboard():
    buttons = [
        [KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥"), KeyboardButton("–£–∑–Ω–∞—Ç—å —Ç–µ–≥")],
        [KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç"), KeyboardButton("–£–∑–Ω–∞—Ç—å –ª–∏–º–∏—Ç")],
        [KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ (–ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã)"), KeyboardButton("–ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def auto_mode_keyboard():
    buttons = [[KeyboardButton("–ù–∞–∑–∞–¥")]]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def archive_folder_inline_keyboard():
    if not ARCHIVE_DIR.is_dir():
        return None
    folders = sorted([f.name for f in ARCHIVE_DIR.iterdir() if f.is_dir()])
    buttons = [[InlineKeyboardButton(folder, callback_data=f"archive_{folder}")] for folder in folders]
    return InlineKeyboardMarkup(buttons) if buttons else None

def archive_menu_reply_keyboard():
    buttons = [
        [KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä—Ö–∏–≤–∞")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

def templates_menu_keyboard():
    buttons = [
        [KeyboardButton("–†–µ–¥–∞–∫—Ç–æ—Ä"), KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

def templates_editor_keyboard():
    buttons = [
        [KeyboardButton("–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω"), KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω")],
        [KeyboardButton("–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

def clients_menu_keyboard():
    buttons = [
        [KeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")],
        [KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")],
        [KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

def clients_cancel_keyboard():
    buttons = [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

def client_management_keyboard(is_active: bool):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º. Callback-–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞."""
    status_button = InlineKeyboardButton("üóÑ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data="client_action_archive") if is_active \
        else InlineKeyboardButton("‚úÖ –°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="client_action_unarchive")

    buttons = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="client_action_add_note"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏", callback_data="client_action_edit_note")
        ],
        [
            InlineKeyboardButton("üñº –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="client_action_add_photo_menu")
        ],
        [status_button],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="client_action_delete")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="client_back_to_menu")]
    ]
    return InlineKeyboardMarkup(buttons)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô –ò –ö–û–ú–ê–ù–î ---
def clear_user_state(context: ContextTypes.DEFAULT_TYPE):
    keys_to_clear = [
        "mode_selected", "awaiting_min_input", "awaiting_tag_input",
        "current_tag", "user_links", "awaiting_archive_selection",
        "public_min_members", "private_min_members",
        "awaiting_template_action", "awaiting_client_name",
        "awaiting_client_note_for", "awaiting_client_photo_for",
        "awaiting_client_edit_note_for", "current_client_name", "photo_type",
        "awaiting_auto_file", "auto_chat_type", "files_to_move", "files_to_delete",
        "deleted_links", "summary_message_id", "links_to_delete_map", "next_callback_id"
    ]
    for key in keys_to_clear:
        context.user_data.pop(key, None)

# --- –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø CONVERSATION HANDLER ---
CHOOSING_CLIENT = 0
EDITING_CLIENT_NAME = 1
EDITING_CLIENT_NOTE = 2
PHOTO_TYPE = 3
AWAITING_PHOTO = 4
CHOOSING_AUTO_MODE_TYPE = 5
AWAITING_AUTO_TAG = 6
AWAITING_AUTO_FILE_UPLOAD = 7
SELECTING_FOLDER = 8 # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–±–æ—Ä–∞ —á–∞—Ç–æ–≤

# --- –ì–õ–ê–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞."""
    if not is_allowed_user(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    await main_menu(update, context)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    if isinstance(update, CallbackQuery):
        message_to_reply = update.message
    else:
        message_to_reply = update.message
    clear_user_state(context)
    await message_to_reply.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END

async def go_back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    clear_user_state(context)
    await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=ReplyKeyboardRemove())
    await main_menu(update, context)
    return ConversationHandler.END

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    current_tag = context.user_data.get("current_tag")
    if not current_tag:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–≥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥'.")
        return
    links = context.user_data.get("user_links", [])
    
    private_links, public_links = split_by_chat_type(links)
    all_unique_links = sorted(list(set(links)))
    
    files_to_move = []
    files_to_delete = []
    files_sent = False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
    unique_public_links = sorted(list(set(public_links)))
    public_filename = f"{current_tag}_{len(unique_public_links)}_–ø—É–±–ª–∏—á–Ω—ã—Ö.txt"
    try:
        with open(public_filename, "w", encoding="utf-8") as f:
            if unique_public_links:
                f.write("\n".join(unique_public_links))
        files_to_move.append(str(pathlib.Path(public_filename).resolve()))
        with open(public_filename, "rb") as doc:
            await update.message.reply_document(document=doc)
        files_sent = True
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{public_filename}': {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {public_filename}", exc_info=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
    unique_private_links = sorted(list(set(private_links)))
    private_filename = f"{current_tag}_{len(unique_private_links)}_–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö.txt"
    try:
        with open(private_filename, "w", encoding="utf-8") as f:
            if unique_private_links:
                f.write("\n".join(unique_private_links))
        files_to_move.append(str(pathlib.Path(private_filename).resolve()))
        with open(private_filename, "rb") as doc:
            await update.message.reply_document(document=doc)
        files_sent = True
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{private_filename}': {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {private_filename}", exc_info=True)
            
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ (—Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
    all_filename = f"{current_tag}_{len(all_unique_links)}_–≤—Å–µ.txt"
    try:
        with open(all_filename, "w", encoding="utf-8") as f:
            if all_unique_links:
                f.write("\n".join(all_unique_links))
        files_to_delete.append(str(pathlib.Path(all_filename).resolve()))
        with open(all_filename, "rb") as doc:
            await update.message.reply_document(document=doc)
        files_sent = True
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{all_filename}': {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {all_filename}", exc_info=True)

    context.user_data["files_to_move"] = files_to_move
    context.user_data["files_to_delete"] = files_to_delete
    
    if files_sent:
        keyboard = [[InlineKeyboardButton("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–∞–ø–∫—É", callback_data="move_to_folder")]]
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –§–∞–π–ª—ã —Å —á–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data.pop("user_links", None)
    else:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤.")
        clear_user_state(context)
    return ConversationHandler.END


async def move_files_to_final_folder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    query = update.callback_query
    await query.answer()

    files_to_move = context.user_data.get("files_to_move", [])
    files_to_delete = context.user_data.get("files_to_delete", [])

    if not files_to_move and not files_to_delete:
        await query.edit_message_text(text=f"{query.message.text}\n\n(–§–∞–π–ª—ã —É–∂–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã/—É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")
        return
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="–ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
    )

    try:
        moved_count = 0
        for file_path_str in files_to_move:
            source_path = pathlib.Path(file_path_str)
            if source_path.exists():
                dest_path = FINAL_DEST_DIR / source_path.name
                print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª: '{source_path}' –≤ '{dest_path}'")
                shutil.move(str(source_path), str(dest_path))
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω: {dest_path.name}")
                moved_count += 1
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {source_path}")

        deleted_count = 0
        for file_path_str in files_to_delete:
            file_path = pathlib.Path(file_path_str)
            if file_path.exists():
                print(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: '{file_path}'")
                os.remove(file_path)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: {file_path.name}")
                deleted_count += 1
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {file_path}")

        await query.edit_message_reply_markup(reply_markup=None)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ñ–∞–π–ª–∞(–æ–≤) –∏ —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–∞(–æ–≤)."
        )
    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}", exc_info=True)
    finally:
        clear_user_state(context)
    return ConversationHandler.END

# --- –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô (–î–ò–°–ü–ï–¢–ß–ï–†) ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    if not update.message or not update.message.text: return ConversationHandler.END
    message_text = update.message.text
    
    if message_text == "–û—Ç–º–µ–Ω–∞":
        clear_user_state(context)
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=clients_menu_keyboard())
        return ConversationHandler.END

    if client_name := context.user_data.get("awaiting_client_edit_note_for"):
        await edit_client_note(update, context, client_name, message_text)
        return ConversationHandler.END
        
    if client_name := context.user_data.get("awaiting_client_name"):
        await create_client_dossier(update, context, message_text)
        return ConversationHandler.END
    if client_name := context.user_data.get("awaiting_client_note_for"):
        await add_note_to_client(update, context, client_name, message_text)
        return ConversationHandler.END

    if context.user_data.get("awaiting_min_input"):
        parts = message_text.split(':')
        if len(parts) == 2:
            try:
                public_val, private_val = int(parts[0].strip()), int(parts[1].strip())
                if public_val < 0 or private_val < 0: raise ValueError
                save_min_members(public_val, private_val)
                await update.message.reply_text(
                    f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n–ü—É–±–ª–∏—á–Ω—ã–µ: {public_val}\n–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö: {private_val}",
                    reply_markup=manual_mode_keyboard()
                )
            except (ValueError, TypeError):
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ (e.g., 500:100).", reply_markup=manual_mode_keyboard())
            finally:
                context.user_data.pop("awaiting_min_input", None)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ (e.g., 500:100).", reply_markup=manual_mode_keyboard())
        return ConversationHandler.END

    if context.user_data.get("awaiting_tag_input"):
        if not re.fullmatch(r"[–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9\s_.-]+", message_text):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.", reply_markup=manual_mode_keyboard())
        else:
            tag = message_text.lower()
            context.user_data["current_tag"] = tag
            await update.message.reply_text(f"‚úÖ –¢–µ–≥ '{tag}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=manual_mode_keyboard())
        context.user_data.pop("awaiting_tag_input", None)
        return ConversationHandler.END

    if context.user_data.get("mode_selected") == "manual":
        await collect_links_from_message(update, context)
        return ConversationHandler.END
        
    return ConversationHandler.END

# --- –õ–û–ì–ò–ö–ê –†–ï–ñ–ò–ú–û–í ---
async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    choice = update.message.text
    clear_user_state(context)

    if choice == "–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º":
        context.user_data["mode_selected"] = "manual"
        current_limits = load_min_members()
        context.user_data["public_min_members"] = current_limits["public_min_members"]
        context.user_data["private_min_members"] = current_limits["private_min_members"]
        await update.message.reply_text("–í—ã –≤ '–†—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ'.\n–ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.", reply_markup=manual_mode_keyboard())
    elif choice == "–ê–≤—Ç–æ —Ä–µ–∂–∏–º":
        context.user_data["mode_selected"] = "auto"
        keyboard = [[KeyboardButton("–ø—É–±–ª–∏—á–Ω—ã–µ"), KeyboardButton("–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö")], [KeyboardButton("–ù–∞–∑–∞–¥")]]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return CHOOSING_AUTO_MODE_TYPE
    elif choice == "–ê—Ä—Ö–∏–≤ —á–∞—Ç–æ–≤":
        context.user_data["mode_selected"] = "archive"
        archive_inline_kb = archive_folder_inline_keyboard()
        if archive_inline_kb:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤:", reply_markup=archive_inline_kb)
        else:
            await update.message.reply_text("–í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç –ø–∞–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞.", reply_markup=archive_menu_reply_keyboard())
        await update.message.reply_text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=archive_menu_reply_keyboard())
    elif choice == "–®–∞–±–ª–æ–Ω—ã":
        context.user_data["mode_selected"] = "templates"
        await update.message.reply_text("–í—ã –≤ –º–µ–Ω—é '–®–∞–±–ª–æ–Ω—ã'. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=templates_menu_keyboard())
    elif choice == "–ö–ª–∏–µ–Ω—Ç—ã":
        context.user_data["mode_selected"] = "clients"
        await update.message.reply_text("–í—ã –≤ –º–µ–Ω—é '–ö–ª–∏–µ–Ω—Ç—ã'.", reply_markup=clients_menu_keyboard())
        return CHOOSING_CLIENT
    return ConversationHandler.END

async def handle_templates_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    choice = update.message.text
    if choice == "–†–µ–¥–∞–∫—Ç–æ—Ä":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
    elif choice == "–ü—Ä–æ—Å–º–æ—Ç—Ä":
        await view_templates(update, context)
    return ConversationHandler.END

async def handle_manual_mode_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    choice = update.message.text
    if choice == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥":
        context.user_data["awaiting_tag_input"] = True
        await update.message.reply_text("–ö–∞–∫–æ–π —Ç–µ–≥ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?")
    elif choice == "–£–∑–Ω–∞—Ç—å —Ç–µ–≥":
        current_tag = context.user_data.get("current_tag", "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π —Ç–µ–≥: '{current_tag}'")
    elif choice == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç":
        context.user_data["awaiting_min_input"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ü–£–ë–õ–ò–ß–ù–´–ï:–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö (e.g., 500:100):")
    elif choice == "–£–∑–Ω–∞—Ç—å –ª–∏–º–∏—Ç":
        current_limits = load_min_members()
        public_min = context.user_data.get("public_min_members", current_limits["public_min_members"])
        private_min = context.user_data.get("private_min_members", current_limits["private_min_members"])
        await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç:\n–ü—É–±–ª–∏—á–Ω—ã–µ: {public_min}\n–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö: {private_min}")
    elif choice == "‚úÖ –ì–æ—Ç–æ–≤–æ (–ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã)":
        await done(update, context)
    return ConversationHandler.END

async def view_templates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    templates = sorted([f.stem for f in TEMPLATES_DIR.glob("*.json")])
    if not templates:
        await update.message.reply_text("–®–∞–±–ª–æ–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    buttons = [[InlineKeyboardButton(t, callback_data=f"show_template_{t}")] for t in templates]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=InlineKeyboardMarkup(buttons))
    return ConversationHandler.END

# --- –°–ò–°–¢–ï–ú–ê –®–ê–ë–õ–û–ù–û–í ---
def load_template_blocks(template_name: str):
    template_file = TEMPLATES_DIR / f"{template_name}.json"
    if not template_file.exists(): return None
    try:
        with open(template_file, "r", encoding="utf-8") as f: return json.load(f)
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–∞ '{template_name}': {e}")
        return None

async def show_template_block(message, context, template_name: str, block_id: str):
    if not is_allowed_user(message.chat_id): return
    template_blocks = load_template_blocks(template_name)
    if not template_blocks or str(block_id) not in template_blocks:
        await message.reply_text("–ë–ª–æ–∫ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    block_data = template_blocks[str(block_id)]
    text = block_data.get("text", "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    buttons_data = block_data.get("buttons", [])
    inline_buttons = []
    for btn in buttons_data:
        btn_list = [InlineKeyboardButton(btn.get("text"), callback_data=f"block_{template_name}_{btn.get('targetBlockId')}")]
        if btn_list: inline_buttons.append(btn_list)
    reply_markup = InlineKeyboardMarkup(inline_buttons) if inline_buttons else None
    def escape_html(text): return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
    formatted_text = f"<pre>{escape_html(text)}</pre>"
    await message.reply_text(formatted_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

async def handle_template_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("show_template_"):
        template_name = data.split("show_template_", 1)[1]
        await show_template_block(query.message, context, template_name, 0)
    elif data.startswith("block_"):
        parts = data.split('_', 2)
        template_name, block_id = parts[1], parts[2]
        await show_template_block(query.message, context, template_name, block_id)

# --- –õ–û–ì–ò–ö–ê –ê–†–•–ò–í–ê ---
async def handle_archive_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    query = update.callback_query
    await query.answer()
    if query.data.startswith("archive_"):
        folder_name = query.data.split('_', 1)[1]
        found_folder = ARCHIVE_DIR / folder_name
        if not found_folder.is_dir():
            await query.message.chat.send_message("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        await query.message.edit_text(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞ '{found_folder.name}'...")
        files = list(found_folder.rglob('*.txt'))
        if not files:
            await query.message.chat.send_message("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç .txt —Ñ–∞–π–ª–æ–≤.")
        else:
            for file_path in files:
                try:
                    await query.message.chat.send_document(document=open(file_path, "rb"))
                except Exception as e:
                    await query.message.chat.send_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '{file_path.name}': {e}")
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞ '{file_path.name}': {e}", exc_info=True)
        await query.message.chat.send_message("–í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        await main_menu(query, context)
    return ConversationHandler.END

async def show_archive_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    if not ARCHIVE_DIR.is_dir():
        await update.message.reply_text("–ü–∞–ø–∫–∞ –∞—Ä—Ö–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
        
    await update.message.reply_text("–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ '—Å–±–æ—Ä...' –∏ 'links...'")
    
    folder_unique_links = {}
    all_txt_files = list(ARCHIVE_DIR.glob('**/*.txt'))
    
    files_to_process = []
    for file_path in all_txt_files:
        file_name = file_path.name.lower()
        if file_name.startswith('—Å–±–æ—Ä') or file_name.startswith('links'):
            files_to_process.append(file_path)
            
    if not files_to_process:
        await update.message.reply_text("–í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è –Ω–∞ '—Å–±–æ—Ä' –∏–ª–∏ 'links'.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END

    for file_path in files_to_process:
        try:
            relative_path = file_path.relative_to(ARCHIVE_DIR)
            top_level_folder = relative_path.parts[0] if relative_path.parts else "–ö–æ—Ä–µ–Ω—å –∞—Ä—Ö–∏–≤–∞"
            folder_unique_links.setdefault(top_level_folder, set())
            
            with open(file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    cleaned_line = line.strip()
                    if cleaned_line.startswith('https://t.me/'):
                        folder_unique_links[top_level_folder].add(cleaned_line)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")

    report_message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —á–∞—Ç–∞–º (–∏–∑ —Ñ–∞–π–ª–æ–≤ '—Å–±–æ—Ä...' –∏ 'links...'):\n\n"
    total_archive_links = 0
    
    if folder_unique_links:
        report_message += "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ:\n"
        for folder, unique_links_set in sorted(folder_unique_links.items()):
            count = len(unique_links_set)
            report_message += f"  - üìÅ {folder}: {count} —á–∞—Ç–æ–≤\n"
            total_archive_links += count
    else:
        report_message += "–í –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫.\n"
        
    report_message += f"\nüìà –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤–æ –≤—Å–µ–º –∞—Ä—Ö–∏–≤–µ: {total_archive_links}"
    
    await update.message.reply_text(report_message, reply_markup=main_menu_keyboard())
    clear_user_state(context)
    return ConversationHandler.END

# --- –ö–õ–ò–ï–ù–¢–´: –õ–û–ì–ò–ö–ê ---
async def start_clients_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    await update.message.reply_text("–í—ã –≤ –º–µ–Ω—é '–ö–ª–∏–µ–Ω—Ç—ã'.", reply_markup=clients_menu_keyboard())
    return CHOOSING_CLIENT

async def handle_clients_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    choice = update.message.text
    if choice == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=clients_cancel_keyboard())
        return EDITING_CLIENT_NAME
    elif choice == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤":
        await list_clients(context, update.message.chat_id, is_active=True)
    elif choice == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤":
        await list_clients(context, update.message.chat_id, is_active=False)
    return CHOOSING_CLIENT

async def create_client_dossier(update: Update, context: ContextTypes.DEFAULT_TYPE, client_name: str):
    if not is_allowed_user(update.effective_user.id): return
    client_path = ACTIVE_CLIENTS_DIR / client_name
    if client_path.exists():
        await update.message.reply_text(f"‚ùå –ö–ª–∏–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º '{client_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=clients_menu_keyboard())
        return CHOOSING_CLIENT
    try:
        client_path.mkdir()
        (client_path / "notes.txt").touch()
        await update.message.reply_text(f"‚úÖ –ö–ª–∏–µ–Ω—Ç '{client_name}' —Å–æ–∑–¥–∞–Ω.", reply_markup=ReplyKeyboardRemove())
        context.user_data['current_client_name'] = client_name
        await show_client_dossier(context, update.message.chat_id, client_path, is_active=True)
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {e}", exc_info=True)
    return CHOOSING_CLIENT

async def list_clients(context: ContextTypes.DEFAULT_TYPE, chat_id: int, is_active: bool):
    if not is_allowed_user(chat_id): return
    base_path = ACTIVE_CLIENTS_DIR if is_active else ARCHIVED_CLIENTS_DIR
    status_text = "–∞–∫—Ç–∏–≤–Ω—ã—Ö" if is_active else "–∞—Ä—Ö–∏–≤–Ω—ã—Ö"
    clients = sorted([d.name for d in base_path.iterdir() if d.is_dir()])
    if not clients:
        await context.bot.send_message(chat_id, f"–°–ø–∏—Å–æ–∫ {status_text} –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.", reply_markup=clients_menu_keyboard())
        return
    buttons = [[InlineKeyboardButton(name, callback_data=f"client_view_{name}")] for name in clients]
    await context.bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ {status_text} —Å–ø–∏—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(buttons))
    return CHOOSING_CLIENT

async def handle_photo_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    query = update.callback_query
    await query.answer()
    client_name = context.user_data.get('current_client_name')
    if not client_name:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–ø–∏—Å–∫—É.")
        logger.error("–û—à–∏–±–∫–∞ –≤ handle_photo_type_callback: client_name –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_data")
        return CHOOSING_CLIENT

    if query.data.endswith('_correspondence'):
        photo_type = "–ø–µ—Ä–µ–ø–∏—Å–∫–∞"
    elif query.data.endswith('_documents'):
        photo_type = "–¥–æ–∫—É–º–µ–Ω—Ç—ã"
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ç–æ.")
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ç–æ: {query.data}")
        return CHOOSING_CLIENT

    context.user_data['awaiting_client_photo_for'] = client_name
    context.user_data['photo_type'] = photo_type
    logger.info(f"‚úÖ –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø —Ñ–æ—Ç–æ: '{photo_type}'. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ user_data.")
    
    await query.message.reply_text(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è '{client_name}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{photo_type}':", reply_markup=clients_cancel_keyboard())
    return AWAITING_PHOTO

async def handle_client_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    query = update.callback_query
    await query.answer()
    data = query.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {data}")

    if data == "client_back_to_menu":
        await query.message.delete()
        context.user_data.pop('current_client_name', None)
        await context.bot.send_message(query.message.chat_id, "–í—ã –≤ –º–µ–Ω—é '–ö–ª–∏–µ–Ω—Ç—ã'.", reply_markup=clients_menu_keyboard())
        return CHOOSING_CLIENT

    parts = data.split('_', 2)
    callback_type = parts[1]

    if callback_type == 'view':
        client_name = parts[2]
        context.user_data['current_client_name'] = client_name
        is_active = (ACTIVE_CLIENTS_DIR / client_name).exists()
        client_path = (ACTIVE_CLIENTS_DIR if is_active else ARCHIVED_CLIENTS_DIR) / client_name
        
        await query.message.delete()
        await show_client_dossier(context, query.message.chat_id, client_path, is_active)
        return CHOOSING_CLIENT

    elif callback_type == 'action':
        action = parts[2]
        client_name = context.user_data.get('current_client_name')
        if not client_name:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–ø–∏—Å–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞.", reply_markup=None)
            logger.error("–û—à–∏–±–∫–∞ –≤ handle_client_callback: client_name –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_data")
            return CHOOSING_CLIENT
        
        chat_id = query.message.chat_id
        is_active = (ACTIVE_CLIENTS_DIR if client_name in [d.name for d in ACTIVE_CLIENTS_DIR.iterdir()] else False)
        client_path = (ACTIVE_CLIENTS_DIR if is_active else ARCHIVED_CLIENTS_DIR) / client_name

        if action in ["archive", "unarchive"]:
            new_path = ARCHIVED_CLIENTS_DIR / client_name if action == "archive" else ACTIVE_CLIENTS_DIR / client_name
            try:
                shutil.move(str(client_path), str(new_path))
                await query.message.delete()
                await context.bot.send_message(chat_id, f"‚úÖ –ö–ª–∏–µ–Ω—Ç '{client_name}' –±—ã–ª {'–∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω' if action == 'archive' else '—Å–¥–µ–ª–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–º'}.")
                await list_clients(context, chat_id, is_active=not is_active)
            except Exception as e:
                await context.bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}': {e}", exc_info=True)

        elif action == "delete":
            try:
                shutil.rmtree(client_path)
                await query.edit_message_text(f"‚úÖ –õ–∏—á–Ω–æ–µ –¥–µ–ª–æ –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}' –±—ã–ª–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–æ.", reply_markup=None)
            except Exception as e:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}': {e}", exc_info=True)

        elif action == "add_note":
            context.user_data['awaiting_client_note_for'] = client_name
            await context.bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}':", reply_markup=clients_cancel_keyboard())
        
        elif action == "edit_note":
            context.user_data['awaiting_client_edit_note_for'] = client_name
            notes_file = client_path / "notes.txt"
            notes_content = "–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
            if notes_file.exists() and notes_file.read_text(encoding='utf-8').strip():
                notes_content = notes_file.read_text(encoding='utf-8')
            
            escaped_notes_content = escape_markdown(notes_content)
            
            await context.bot.send_message(
                chat_id,
                f"üìù *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è '{escape_markdown(client_name)}'*\n\n**–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n\\-\\-\-\n{escaped_notes_content}\n\\-\\-\\- \\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω–∏—Ç —Å—Ç–∞—Ä—ã–π\\.",
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=clients_cancel_keyboard()
            )

        elif action == "add_photo_menu":
            client_name = context.user_data['current_client_name']
            photo_menu_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üñº –ü–µ—Ä–µ–ø–∏—Å–∫–∞", callback_data="client_photo_type_correspondence")],
                [InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="client_photo_type_documents")]
            ])
            await context.bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ç–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}':", reply_markup=photo_menu_keyboard)
            return PHOTO_TYPE

    return CHOOSING_CLIENT

async def show_client_dossier(context, chat_id, client_path: pathlib.Path, is_active: bool):
    if not is_allowed_user(chat_id): return
    notes_file = client_path / "notes.txt"
    notes_content = "–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
    if notes_file.exists() and notes_file.read_text(encoding='utf-8').strip():
        notes_content = notes_file.read_text(encoding='utf-8')
    
    escaped_client_name = escape_markdown(client_path.name)
    escaped_notes_content = escape_markdown(notes_content)

    await context.bot.send_message(
        chat_id, 
        f"\\-\\-\\- –õ–∏—á–Ω–æ–µ –¥–µ–ª–æ: {escaped_client_name} \\-\\-\\- \n\nüìù –ó–∞–º–µ—Ç–∫–∏:\n{escaped_notes_content}",
        parse_mode=ParseMode.MARKDOWN_V2
    )

    corr_path = client_path / "–ø–µ—Ä–µ–ø–∏—Å–∫–∞"
    docs_path = client_path / "–¥–æ–∫—É–º–µ–Ω—Ç—ã"

    # –°–±–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    photos_corr = list(corr_path.glob('*.jpg')) + list(corr_path.glob('*.png'))
    if photos_corr:
        await context.bot.send_message(chat_id, "üñº –ü–µ—Ä–µ–ø–∏—Å–∫–∞:")
        media_group = []
        for photo_path in photos_corr:
            media_group.append(InputMediaPhoto(media=open(photo_path, 'rb')))
            if len(media_group) == 10:
                await context.bot.send_media_group(chat_id, media_group)
                media_group = []
        if media_group:
            await context.bot.send_media_group(chat_id, media_group)
    
    # –°–±–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    photos_docs = list(docs_path.glob('*.jpg')) + list(docs_path.glob('*.png'))
    if photos_docs:
        await context.bot.send_message(chat_id, "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã:")
        media_group = []
        for photo_path in photos_docs:
            media_group.append(InputMediaPhoto(media=open(photo_path, 'rb')))
            if len(media_group) == 10:
                await context.bot.send_media_group(chat_id, media_group)
                media_group = []
        if media_group:
            await context.bot.send_media_group(chat_id, media_group)
                
    if not photos_corr and not photos_docs:
        await context.bot.send_message(chat_id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç.")

    await context.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=client_management_keyboard(is_active))

async def add_note_to_client(update: Update, context: ContextTypes.DEFAULT_TYPE, client_name: str, text: str):
    if not is_allowed_user(update.effective_user.id): return
    is_active = (ACTIVE_CLIENTS_DIR / client_name).exists()
    client_path = (ACTIVE_CLIENTS_DIR if is_active else ARCHIVED_CLIENTS_DIR) / client_name
    
    if not client_path.exists():
        await update.message.reply_text(f"–ö–ª–∏–µ–Ω—Ç '{client_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        try:
            with open(client_path / "notes.txt", "a", encoding="utf-8") as f:
                f.write(f"\n- {text}")
            await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É '{client_name}'.", reply_markup=ReplyKeyboardRemove())
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}", reply_markup=ReplyKeyboardRemove())
            
    await show_client_dossier(context, update.message.chat_id, client_path, is_active)

async def edit_client_note(update: Update, context: ContextTypes.DEFAULT_TYPE, client_name: str, new_text: str):
    if not is_allowed_user(update.effective_user.id): return
    is_active = (ACTIVE_CLIENTS_DIR / client_name).exists()
    client_path = (ACTIVE_CLIENTS_DIR if is_active else ARCHIVED_CLIENTS_DIR) / client_name
    
    if not client_path.exists():
        await update.message.reply_text(f"–ö–ª–∏–µ–Ω—Ç '{client_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        try:
            with open(client_path / "notes.txt", "w", encoding="utf-8") as f:
                f.write(new_text)
            await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}' –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}", reply_markup=ReplyKeyboardRemove())
            
    await show_client_dossier(context, update.message.chat_id, client_path, is_active)

async def add_photo_to_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    logger.info("–§—É–Ω–∫—Ü–∏—è add_photo_to_client –≤—ã–∑–≤–∞–Ω–∞.")
    
    client_name = context.user_data.get('awaiting_client_photo_for')
    photo_type = context.user_data.get('photo_type')
    
    if not client_name or not photo_type:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤ –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—è —Å –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞.")
        return CHOOSING_CLIENT
    
    is_active = (ACTIVE_CLIENTS_DIR / client_name).exists()
    client_path = (ACTIVE_CLIENTS_DIR if is_active else ARCHIVED_CLIENTS_DIR) / client_name
    target_path = client_path / photo_type

    if not client_path.exists():
        await update.message.reply_text(f"–ö–ª–∏–µ–Ω—Ç '{client_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")
    else:
        try:
            target_path.mkdir(parents=True, exist_ok=True)
            
            file_to_download = await (update.message.photo[-1] if update.message.photo else update.message.document).get_file()
            
            file_extension = file_to_download.file_path.split('.')[-1]
            file_name = f"{client_name}_{file_to_download.file_unique_id}.{file_extension}"
            save_path = target_path / file_name
            
            await file_to_download.download_to_drive(save_path)
            
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.", reply_markup=clients_cancel_keyboard())
            await update.message.delete()
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}': {e}", exc_info=True)
    
    return AWAITING_PHOTO

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    if client_name := context.user_data.get('awaiting_client_photo_for'):
        is_active = (ACTIVE_CLIENTS_DIR / client_name).exists()
        client_path = (ACTIVE_CLIENTS_DIR if is_active else ARCHIVED_CLIENTS_DIR) / client_name
        await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        context.user_data.pop('awaiting_client_photo_for', None)
        context.user_data.pop('photo_type', None)
        await show_client_dossier(context, update.message.chat_id, client_path, is_active)
        return CHOOSING_CLIENT
    
    clear_user_state(context)
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=clients_menu_keyboard())
    return CHOOSING_CLIENT

# --- –°–ë–û–† –°–°–´–õ–û–ö ---
async def collect_links_from_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id): return
    if context.user_data.get("mode_selected") != "manual": return
    if not update.message.text and not update.message.caption: return
    if not update.message.entities and not update.message.caption_entities: return
    if not context.user_data.get("current_tag"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–≥.")
        return

    text = update.message.text or update.message.caption
    entities = update.message.entities or update.message.caption_entities
    public_min = context.user_data.get("public_min_members", load_min_members()["public_min_members"])
    private_min = context.user_data.get("private_min_members", load_min_members()["private_min_members"])
    user_links = context.user_data.setdefault("user_links", [])
    added_count = 0

    for entity in entities:
        if entity.type not in (MessageEntity.URL, MessageEntity.TEXT_LINK): continue
        url = entity.url or text[entity.offset:entity.offset + entity.length]
        is_private = url.startswith("https://t.me/+")
        current_limit = private_min if is_private else public_min

        line_text = ""
        current_offset = 0
        for line in text.split('\n'):
            line_end = current_offset + len(line)
            if (current_offset <= entity.offset < line_end):
                line_text = line; break
            current_offset += len(line) + 1
        if not line_text: continue
        
        if parse_member_count(line_text) < current_limit: continue
        if url not in user_links:
            user_links.append(url); added_count += 1
            
    if added_count > 0:
        await update.message.reply_text(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫. –í—Å–µ–≥–æ: {len(user_links)}.")
    else:
        await update.message.reply_text(f"‚ùå –ù–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ (–≤—Å–µ–≥–æ: {len(user_links)}).")

# --- –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú ---
async def handle_auto_mode_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode_selected"] = "auto"
    keyboard = [[KeyboardButton("–ø—É–±–ª–∏—á–Ω—ã–µ"), KeyboardButton("–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö")], [KeyboardButton("–ù–∞–∑–∞–¥")]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return CHOOSING_AUTO_MODE_TYPE

async def handle_auto_mode_type_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    
    if choice == "–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö":
        await update.message.reply_text("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END

    context.user_data["auto_chat_type"] = choice
    await update.message.reply_text(f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º '{choice}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (—Ç–µ–≥) –¥–ª—è —Ñ–∞–π–ª–∞:", reply_markup=auto_mode_keyboard())
    return AWAITING_AUTO_TAG

async def handle_auto_tag_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tag = update.message.text
    if not re.fullmatch(r"[–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9\s_.-]+", tag):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return AWAITING_AUTO_TAG
    context.user_data["current_tag"] = tag
    await update.message.reply_text(f"‚úÖ –¢–µ–≥ '{tag}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª.", reply_markup=auto_mode_keyboard())
    return AWAITING_AUTO_FILE_UPLOAD

async def process_auto_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_user(update.effective_user.id):
        return ConversationHandler.END
    
    if not update.message.document or update.message.document.mime_type != 'text/csv':
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .csv –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.", reply_markup=auto_mode_keyboard())
        return AWAITING_AUTO_FILE_UPLOAD
        
    try:
        file_id = update.message.document.file_id
        file = await context.bot.get_file(file_id)
        
        file_stream = io.BytesIO()
        await file.download_to_memory(file_stream)
        file_stream.seek(0)
        
        csv_reader = csv.DictReader(io.TextIOWrapper(file_stream, 'utf-8'))
        
        all_links = []
        
        for row in csv_reader:
            username = row.get("username", "")
            chat_type = row.get("type", "")
            
            url = None
            if username and username.startswith("@"):
                url = f"https://t.me/{username[1:]}"
            elif chat_type == "private group" and row.get("invite_link"):
                url = row["invite_link"]
                
            if url:
                all_links.append(url)

        private_links, public_links = split_by_chat_type(all_links)
        unique_public_links = sorted(list(set(public_links)))
        unique_private_links = sorted(list(set(private_links)))
        all_unique_links = sorted(list(set(all_links)))
        
        current_tag = context.user_data.get("current_tag", "–∞–≤—Ç–æ")
        
        files_to_move = []
        files_to_delete = []
        files_sent = False

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
        public_filename = f"{current_tag}_{len(unique_public_links)}_–ø—É–±–ª–∏—á–Ω—ã—Ö.txt"
        try:
            with open(public_filename, "w", encoding="utf-8") as f:
                if unique_public_links:
                    f.write("\n".join(unique_public_links))
            files_to_move.append(str(pathlib.Path(public_filename).resolve()))
            with open(public_filename, "rb") as doc:
                await update.message.reply_document(document=doc)
            files_sent = True
        except Exception as e:
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ '{public_filename}': {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {public_filename}", exc_info=True)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
        private_filename = f"{current_tag}_{len(unique_private_links)}_–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö.txt"
        try:
            with open(private_filename, "w", encoding="utf-8") as f:
                if unique_private_links:
                    f.write("\n".join(unique_private_links))
            files_to_move.append(str(pathlib.Path(private_filename).resolve()))
            with open(private_filename, "rb") as doc:
                await update.message.reply_document(document=doc)
            files_sent = True
        except Exception as e:
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ '{private_filename}': {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {private_filename}", exc_info=True)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ (—Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞)
        all_filename = f"{current_tag}_{len(all_unique_links)}_–≤—Å–µ.txt"
        try:
            with open(all_filename, "w", encoding="utf-8") as f:
                if all_unique_links:
                    f.write("\n".join(all_unique_links))
            files_to_delete.append(str(pathlib.Path(all_filename).resolve()))
            with open(all_filename, "rb") as doc:
                await update.message.reply_document(document=doc)
            files_sent = True
        except Exception as e:
            await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ '{all_filename}': {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {all_filename}", exc_info=True)


        context.user_data["files_to_move"] = files_to_move
        context.user_data["files_to_delete"] = files_to_delete

        if files_sent:
            keyboard = [[InlineKeyboardButton("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–∞–ø–∫—É", callback_data="move_to_folder")]]
            await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª—ã —Å —á–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.message.reply_text("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Å—ã–ª–æ–∫.")

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV-—Ñ–∞–π–ª–∞: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return AWAITING_AUTO_FILE_UPLOAD

# --- –§–£–ù–ö–¶–ò–û–ù–ê–õ "–û–¢–ë–û–† –ß–ê–¢–û–í" ---

async def start_chat_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–±–æ—Ä–∞ —á–∞—Ç–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–ø–∫–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞."""
    if not is_allowed_user(update.effective_user.id): return ConversationHandler.END
    
    clear_user_state(context)
    
    if not ARCHIVE_DIR.is_dir():
        await update.message.reply_text("–ü–∞–ø–∫–∞ –∞—Ä—Ö–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END

    folders = sorted([f.name for f in ARCHIVE_DIR.iterdir() if f.is_dir()])
    if not folders:
        await update.message.reply_text("–í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç –ø–∞–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END

    buttons = [[InlineKeyboardButton(folder, callback_data=f"select_folder_{folder}")] for folder in folders]
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –æ—Ç–±–æ—Ä–∞ —á–∞—Ç–æ–≤:", reply_markup=keyboard)
    return SELECTING_FOLDER

async def send_links_from_folder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ò—â–µ—Ç —Ñ–∞–π–ª—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ (–≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–∫–∞—Ö).
    """
    query = update.callback_query
    await query.answer()
    folder_name = query.data.split("select_folder_", 1)[1]
    folder_path = ARCHIVE_DIR / folder_name

    if not folder_path.is_dir():
        await query.edit_message_text("–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END

    await query.edit_message_text(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–æ–∫ –∏–∑ –ø–∞–ø–∫–∏ '{folder_name}' –∏ –≤—Å–µ—Ö –µ—ë –ø–æ–¥–ø–∞–ø–æ–∫...")

    files_to_process = []
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–∫–∞—Ö —Å –ø–æ–º–æ—â—å—é **/*.txt
    for file_path in folder_path.glob('**/*.txt'):
        file_name = file_path.name.lower()
        if file_name.startswith('—Å–±–æ—Ä') or file_name.startswith('links'):
            files_to_process.append(file_path)

    if not files_to_process:
        await context.bot.send_message(query.message.chat_id, "–í —ç—Ç–æ–π –ø–∞–ø–∫–µ –∏ –µ—ë –ø–æ–¥–ø–∞–ø–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ ('—Å–±–æ—Ä...' –∏–ª–∏ 'links...').")
        return ConversationHandler.END

    context.user_data['links_to_delete_map'] = {}
    context.user_data['next_callback_id'] = 0
    
    links_sent_count = 0
    for file_path in files_to_process:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                links = [line.strip() for line in f if line.strip().startswith('https://t.me/')]

            if links:
                 await context.bot.send_message(query.message.chat_id, f"--- –§–∞–π–ª: {file_path.relative_to(ARCHIVE_DIR)} ---")

            for link in links:
                callback_id = context.user_data['next_callback_id']
                context.user_data['next_callback_id'] += 1

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –º–∞–ø–ø–∏–Ω–≥–µ
                context.user_data['links_to_delete_map'][callback_id] = {
                    'file_path': str(file_path),
                    'link': link
                }

                callback_data = f"del_{callback_id}" # –ö–æ—Ä–æ—Ç–∫–∞—è, —É–Ω–∏–∫–∞–ª—å–Ω–∞—è callback_data
                keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=callback_data)]])

                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=link,
                    reply_markup=keyboard
                )
                links_sent_count += 1
        except Exception as e:
            await context.bot.send_message(query.message.chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path.name}: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")

    if links_sent_count == 0:
        await context.bot.send_message(query.message.chat_id, "–í –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫.")
    
    await context.bot.send_message(
        chat_id=query.message.chat_id, 
        text=f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {links_sent_count} —Å—Å—ã–ª–æ–∫.",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END

async def delete_link_from_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –∏–∑ —Ñ–∞–π–ª–∞ (–≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ) –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö.
    """
    query = update.callback_query
    await query.answer()

    try:
        callback_id = int(query.data.split('_', 1)[1])
    except (ValueError, IndexError):
        await query.message.edit_text(f"{query.message.text}\n\n(–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data)", reply_markup=None)
        return

    links_to_delete_map = context.user_data.get('links_to_delete_map', {})
    if callback_id not in links_to_delete_map:
        await query.message.edit_text(f"{query.message.text}\n\n(–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)", reply_markup=None)
        return

    link_data = links_to_delete_map.pop(callback_id)
    file_path_str = link_data['file_path']
    link_to_delete_text = link_data['link']
    file_path = pathlib.Path(file_path_str)

    if not file_path.exists():
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"–û—à–∏–±–∫–∞: –§–∞–π–ª {file_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await query.message.delete()
        return

    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        lines_to_keep = [line for line in lines if line.strip() != link_to_delete_text]

        with open(file_path, 'w', encoding='utf-8') as f:
            f.writelines(lines_to_keep)
        
        await query.message.delete()
        
        deleted_links_list = context.user_data.setdefault('deleted_links', [])
        if link_to_delete_text not in deleted_links_list:
            deleted_links_list.append(link_to_delete_text)

        escaped_links = [escape_markdown(link) for link in deleted_links_list]
        report_text = "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:*\n\n" + "\n".join(f"\\- {link}" for link in escaped_links)

        summary_message_id = context.user_data.get('summary_message_id')
        
        if summary_message_id:
            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            current_text = context.bot_data.get(f"summary_text_{summary_message_id}", "")
            if current_text != report_text:
                await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=summary_message_id,
                    text=report_text,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
                context.bot_data[f"summary_text_{summary_message_id}"] = report_text
        else:
            sent_message = await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=report_text,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            context.user_data['summary_message_id'] = sent_message.message_id
            context.bot_data[f"summary_text_{sent_message.message_id}"] = report_text

    except Exception as e:
        await context.bot.send_message(chat_id=query.message.chat_id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ '{link_to_delete_text}' –∏–∑ —Ñ–∞–π–ª–∞ '{file_path}': {e}", exc_info=True)


if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    
    main_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^–ö–ª–∏–µ–Ω—Ç—ã$"), start_clients_menu),
            MessageHandler(filters.Regex("^–ê–≤—Ç–æ —Ä–µ–∂–∏–º$"), handle_auto_mode_entry),
        ],
        states={
            CHOOSING_CLIENT: [
                MessageHandler(filters.Regex("^(–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞|–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤|–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤)$"), handle_clients_menu),
                CallbackQueryHandler(handle_client_callback, pattern=r"^client_"),
            ],
            EDITING_CLIENT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^–û—Ç–º–µ–Ω–∞$"), create_client_dossier)],
            PHOTO_TYPE: [CallbackQueryHandler(handle_photo_type_callback, pattern=r"^client_photo_type_")],
            AWAITING_PHOTO: [MessageHandler(filters.PHOTO | filters.Document.IMAGE, add_photo_to_client)],
            CHOOSING_AUTO_MODE_TYPE: [MessageHandler(filters.Regex("^(–ø—É–±–ª–∏—á–Ω—ã–µ|–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö)$"), handle_auto_mode_type_choice)],
            AWAITING_AUTO_TAG: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_auto_tag_input)],
            AWAITING_AUTO_FILE_UPLOAD: [MessageHandler(filters.Document.MimeType('text/csv'), process_auto_file)],
        },
        fallbacks=[
            MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), go_back_to_main_menu)
        ],
    )
    
    chat_selection_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–û—Ç–±–æ—Ä —á–∞—Ç–æ–≤$"), start_chat_selection)],
        states={
            SELECTING_FOLDER: [CallbackQueryHandler(send_links_from_folder, pattern=r"^select_folder_")]
        },
        fallbacks=[MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), go_back_to_main_menu)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), go_back_to_main_menu))
    app.add_handler(MessageHandler(filters.Regex("^(–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º|–ê—Ä—Ö–∏–≤ —á–∞—Ç–æ–≤|–®–∞–±–ª–æ–Ω—ã)$"), handle_menu_choice))
    app.add_handler(MessageHandler(
        filters.Regex("^(–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥|–£–∑–Ω–∞—Ç—å —Ç–µ–≥|–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç|–£–∑–Ω–∞—Ç—å –ª–∏–º–∏—Ç|‚úÖ –ì–æ—Ç–æ–≤–æ \\(–ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã\\))$"),
        handle_manual_mode_buttons))
    app.add_handler(MessageHandler(filters.Entity(MessageEntity.URL) | filters.Entity(MessageEntity.TEXT_LINK), collect_links_from_message))
    app.add_handler(CallbackQueryHandler(move_files_to_final_folder, pattern=r"^move_to_folder$"))
    app.add_handler(MessageHandler(filters.Regex("^–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä—Ö–∏–≤–∞$"), show_archive_stats))
    app.add_handler(CallbackQueryHandler(handle_archive_callback, pattern=r"^archive_"))
    app.add_handler(MessageHandler(filters.Regex("^(–†–µ–¥–∞–∫—Ç–æ—Ä|–ü—Ä–æ—Å–º–æ—Ç—Ä)$"), handle_templates_menu_buttons))
    app.add_handler(CallbackQueryHandler(handle_template_callback, pattern=r"^(show_template_|block_)"))
    
    app.add_handler(main_conv_handler)
    app.add_handler(chat_selection_conv_handler)
    
    app.add_handler(CallbackQueryHandler(delete_link_from_file, pattern=r"^del_"))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()