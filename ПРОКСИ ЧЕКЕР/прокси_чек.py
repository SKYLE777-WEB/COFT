import os
import requests
import threading
from queue import Queue
import time
import socket
import socks # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å SOCKS-–ø—Ä–æ–∫—Å–∏
import argparse # –î–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏) ---
# –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "—Å—ã—Ä—ã–µ" —Å—Ç—Ä–æ–∫–∏ (r'') –¥–ª—è –ø—É—Ç–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –æ–±—Ä–∞—Ç–Ω—ã–º–∏ —Å–ª—ç—à–∞–º–∏
DEFAULT_PROXY_DIR = r'C:\–°–æ—Ñ—Ç\–ü–†–û–ö–°–ò –ß–ï–ö–ï–†\–ù–ï–ø—Ä–æ–≤–µ—Ä—è–Ω–Ω—ã–µ'
DEFAULT_OUTPUT_DIR = r'C:\–°–æ—Ñ—Ç\–ü–†–û–ö–°–ò –ß–ï–ö–ï–†\–†–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏'
DEFAULT_HTTP_TIMEOUT = 15  # –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è HTTP/S –∑–∞–ø—Ä–æ—Å–æ–≤
DEFAULT_SOCKS_TIMEOUT = 10 # –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è SOCKS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—á–∞—Å—Ç–æ –Ω—É–∂–µ–Ω –º–µ–Ω—å—à–µ)
DEFAULT_NUM_THREADS = 500 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
DEFAULT_MAX_PING_MS = 3000 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–∏–Ω–≥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è "—Ä–∞–±–æ—á–∏—Ö" –ø—Ä–æ–∫—Å–∏

# URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
TEST_URL_HTTP = 'http://www.google.com'
TEST_URL_HTTPS = 'https://www.google.com' # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTPS –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTPS-–ø—Ä–æ–∫—Å–∏
TEST_URL_SOCKS = 'http://www.google.com' # –î–ª—è SOCKS –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTP-—Å–∞–π—Ç

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—É—Ç–µ–π –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ main)
OUTPUT_FILE_HTTP = ''
OUTPUT_FILE_SOCKS4 = ''
OUTPUT_FILE_SOCKS5 = ''

print("---")
print("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏...")
print("---")

def worker(proxy_queue, output_queue, max_ping_ms, http_timeout, socks_timeout):
    """
    –§—É–Ω–∫—Ü–∏—è-—Ä–∞–±–æ—á–∏–π –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤. –ë–µ—Ä–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤—ã—Ö–æ–¥–Ω—É—é –æ—á–µ—Ä–µ–¥—å.
    """
    while True:
        proxy = proxy_queue.get()
        if proxy is None: # None - —ç—Ç–æ —Å–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ—Ç–æ–∫–∞
            break
        check_proxy_wrapper(proxy, output_queue, max_ping_ms, http_timeout, socks_timeout)
        proxy_queue.task_done() # –°–æ–æ–±—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞

def check_http_proxy(proxy, output_queue, max_ping_ms, timeout):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç HTTP/S –ø—Ä–æ–∫—Å–∏. """
    start_time = time.time()
    response = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º response
    try:
        proxies = {
            'http': f'http://{proxy}',
            'https': f'http://{proxy}' # HTTP-–ø—Ä–æ–∫—Å–∏ —á–∞—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∏ HTTPS-—Ç—Ä–∞—Ñ–∏–∫ —á–µ—Ä–µ–∑ CONNECT
        }
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP
        response = requests.get(TEST_URL_HTTP, proxies=proxies, timeout=timeout)
        end_time = time.time()
        ping_ms = round((end_time - start_time) * 1000)

        if response.status_code == 200:
            if ping_ms <= max_ping_ms:
                output_queue.put(('http', proxy, ping_ms))
                print(f"‚úÖ HTTP/S —Ä–∞–±–æ—Ç–∞–µ—Ç: {proxy} (–ü–∏–Ω–≥: {ping_ms} –º—Å)")
                return True
            else:
                print(f"üü° HTTP/S —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø–∏–Ω–≥ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π ({ping_ms} –º—Å > {max_ping_ms} –º—Å): {proxy}")
                return False
        else:
            print(f"‚ùå HTTP/S –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–°—Ç–∞—Ç—É—Å: {response.status_code}): {proxy}")
            return False
    except requests.exceptions.Timeout:
        end_time = time.time()
        ping_ms = round((end_time - start_time) * 1000)
        print(f"‚ùå HTTP/S –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–¢–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ {ping_ms} –º—Å): {proxy}")
        return False
    except requests.exceptions.ConnectionError:
        end_time = time.time()
        ping_ms = round((end_time - start_time) * 1000)
        print(f"‚ùå HTTP/S –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ {ping_ms} –º—Å): {proxy}")
        return False
    except requests.exceptions.RequestException as e:
        end_time = time.time()
        ping_ms = round((end_time - start_time) * 1000)
        print(f"‚ùå HTTP/S –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ RequestException '{e}' –ø–æ—Å–ª–µ {ping_ms} –º—Å): {proxy}")
        return False
    except Exception as e:
        end_time = time.time()
        ping_ms = round((end_time - start_time) * 1000)
        print(f"‚ùå HTTP/S –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ '{e}' –ø–æ—Å–ª–µ {ping_ms} –º—Å): {proxy}")
        return False
    finally: # –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–≤–µ—Ç–∞ requests
        if response and hasattr(response, 'close'):
            response.close()


def check_socks_proxy(proxy_addr, socks_version, output_queue, max_ping_ms, socks_timeout, http_timeout):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç SOCKS4 –∏–ª–∏ SOCKS5 –ø—Ä–æ–∫—Å–∏. """
    host, port = proxy_addr.split(':')
    port = int(port)
    start_time = time.time()

    s = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º s –∫–∞–∫ None
    session = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session
    response = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º response
    try:
        s = socks.socksocket()
        s.set_proxy(socks_version, host, port)
        s.settimeout(socks_timeout) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è SOCKS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        
        # requests.Session() –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π socks-–ø—Ä–æ–∫—Å–∏
        session = requests.Session()
        session.proxies = {
            'http': f'{ "socks4" if socks_version == socks.SOCKS4 else "socks5" }://{proxy_addr}',
            'https': f'{ "socks4" if socks_version == socks.SOCKS4 else "socks5" }://{proxy_addr}'
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º http_timeout –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ SOCKS
        response = session.get(TEST_URL_SOCKS, timeout=http_timeout) 
        
        end_time = time.time()
        ping_ms = round((end_time - start_time) * 1000)

        proxy_type_str = "socks4" if socks_version == socks.SOCKS4 else "socks5"

        if response.status_code == 200:
            if ping_ms <= max_ping_ms:
                output_queue.put((proxy_type_str, proxy_addr, ping_ms))
                print(f"‚úÖ {proxy_type_str.upper()} —Ä–∞–±–æ—Ç–∞–µ—Ç: {proxy_addr} (–ü–∏–Ω–≥: {ping_ms} –º—Å)")
                return True
            else:
                print(f"üü° {proxy_type_str.upper()} —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø–∏–Ω–≥ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π ({ping_ms} –º—Å > {max_ping_ms} –º—Å): {proxy_addr}")
                return False
        else:
            print(f"‚ùå {proxy_type_str.upper()} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–°—Ç–∞—Ç—É—Å: {response.status_code}): {proxy_addr}")
            return False

    except (socks.ProxyConnectionError, socks.GeneralProxyError) as e:
        end_time = time.time()
        ping_ms = round((end_time - start_time) * 1000)
        proxy_type_str = "SOCKS4" if socks_version == socks.SOCKS4 else "SOCKS5"
        print(f"‚ùå {proxy_type_str} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è '{e}' –ø–æ—Å–ª–µ {ping_ms} –º—Å): {proxy_addr}")
        return False
    except ConnectionRefusedError:
        end_time = time.time()
        ping_ms = round((end_time - start_time) * 1000)
        proxy_type_str = "SOCKS4" if socks_version == socks.SOCKS4 else "SOCKS5"
        print(f"‚ùå {proxy_type_str} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ—Å–ª–µ {ping_ms} –º—Å): {proxy_addr}")
        return False
    except socket.timeout:
        end_time = time.time()
        ping_ms = round((end_time - start_time) * 1000)
        proxy_type_str = "SOCKS4" if socks_version == socks.SOCKS4 else "SOCKS5"
        print(f"‚ùå {proxy_type_str} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–¢–∞–π–º–∞—É—Ç —Å–æ–∫–µ—Ç–∞ –ø–æ—Å–ª–µ {ping_ms} –º—Å): {proxy_addr}")
        return False
    except requests.exceptions.Timeout:
        end_time = time.time()
        ping_ms = round((end_time - start_time) * 1000)
        proxy_type_str = "SOCKS4" if socks_version == socks.SOCKS4 else "SOCKS5"
        print(f"‚ùå {proxy_type_str} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–¢–∞–π–º–∞—É—Ç HTTP-–∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –ø–æ—Å–ª–µ {ping_ms} –º—Å): {proxy_addr}")
        return False
    except requests.exceptions.ConnectionError:
        end_time = time.time()
        ping_ms = round((end_time - start_time) * 1000)
        proxy_type_str = "SOCKS4" if socks_version == socks.SOCKS4 else "SOCKS5"
        print(f"‚ùå {proxy_type_str} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –ø–æ—Å–ª–µ {ping_ms} –º—Å): {proxy_addr}")
        return False
    except requests.exceptions.RequestException as e:
        end_time = time.time()
        ping_ms = round((end_time - start_time) * 1000)
        proxy_type_str = "SOCKS4" if socks_version == socks.SOCKS4 else "SOCKS5"
        print(f"‚ùå {proxy_type_str} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ RequestException '{e}' –ø–æ—Å–ª–µ {ping_ms} –º—Å): {proxy_addr}")
        return False
    except Exception as e:
        end_time = time.time()
        ping_ms = round((end_time - start_time) * 1000)
        proxy_type_str = "SOCKS4" if socks_version == socks.SOCKS4 else "SOCKS5"
        print(f"‚ùå {proxy_type_str} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ '{e}' –ø–æ—Å–ª–µ {ping_ms} –º—Å): {proxy_addr}")
        return False
    finally:
        if s and isinstance(s, socket.socket):
            s.close()
        if response and hasattr(response, 'close'): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ response –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ close
            response.close()
        if session and isinstance(session, requests.Session): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ session –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            session.close()

def check_proxy_wrapper(proxy, output_queue, max_ping_ms, http_timeout, socks_timeout):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏. –ü—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø—Ä–æ–∫—Å–∏ (SOCKS5, SOCKS4, HTTP/S)
    –∏ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ.
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ SOCKS5
    if check_socks_proxy(proxy, socks.SOCKS5, output_queue, max_ping_ms, socks_timeout, http_timeout):
        return
    
    # –ï—Å–ª–∏ –Ω–µ SOCKS5, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ SOCKS4
    if check_socks_proxy(proxy, socks.SOCKS4, output_queue, max_ping_ms, socks_timeout, http_timeout):
        return

    # –ï—Å–ª–∏ –Ω–µ SOCKS4, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ HTTP/S –ø—Ä–æ–∫—Å–∏
    if check_http_proxy(proxy, output_queue, max_ping_ms, http_timeout):
        return

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ç–∏–ø –Ω–µ –ø–æ–¥–æ—à–µ–ª
    print(f"üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∏–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç/—Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –ø–∏–Ω–≥: {proxy}")


def main():
    global OUTPUT_FILE_HTTP, OUTPUT_FILE_SOCKS4, OUTPUT_FILE_SOCKS5

    parser = argparse.ArgumentParser(description="Multi-threaded proxy checker.")
    parser.add_argument('--input-dir', type=str, default=DEFAULT_PROXY_DIR,
                        help=f'Directory containing .txt files with proxies (default: {DEFAULT_PROXY_DIR}).')
    parser.add_argument('--output-dir', type=str, default=DEFAULT_OUTPUT_DIR,
                        help=f'Directory to save working proxies (default: {DEFAULT_OUTPUT_DIR}).')
    parser.add_argument('--http-timeout', type=int, default=DEFAULT_HTTP_TIMEOUT,
                        help=f'Timeout in seconds for HTTP/S requests (default: {DEFAULT_HTTP_TIMEOUT}).')
    parser.add_argument('--socks-timeout', type=int, default=DEFAULT_SOCKS_TIMEOUT,
                        help=f'Timeout in seconds for SOCKS connections (default: {DEFAULT_SOCKS_TIMEOUT}).')
    parser.add_argument('--threads', type=int, default=DEFAULT_NUM_THREADS,
                        help=f'Number of threads for parallel checking (default: {DEFAULT_NUM_THREADS}).')
    parser.add_argument('--max-ping', type=int, default=DEFAULT_MAX_PING_MS,
                        help=f'Maximum allowed ping in milliseconds for a "working" proxy (default: {DEFAULT_MAX_PING_MS}).')
    
    args = parser.parse_args()

    # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ args
    proxy_dir = args.input_dir
    output_dir = args.output_dir
    http_timeout = args.http_timeout
    socks_timeout = args.socks_timeout
    num_threads = args.threads
    max_ping_ms = args.max_ping

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    os.makedirs(output_dir, exist_ok=True)

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ —Å –ø–æ–¥–ø–∞–ø–∫–∞–º–∏ ---
    HTTP_OUTPUT_SUBDIR = os.path.join(output_dir, 'http')
    SOCKS4_OUTPUT_SUBDIR = os.path.join(output_dir, 'socks4')
    SOCKS5_OUTPUT_SUBDIR = os.path.join(output_dir, 'socks5')

    os.makedirs(HTTP_OUTPUT_SUBDIR, exist_ok=True)
    os.makedirs(SOCKS4_OUTPUT_SUBDIR, exist_ok=True)
    os.makedirs(SOCKS5_OUTPUT_SUBDIR, exist_ok=True)

    OUTPUT_FILE_HTTP = os.path.join(HTTP_OUTPUT_SUBDIR, 'working_proxies.txt')
    OUTPUT_FILE_SOCKS4 = os.path.join(SOCKS4_OUTPUT_SUBDIR, 'working_proxies.txt')
    OUTPUT_FILE_SOCKS5 = os.path.join(SOCKS5_OUTPUT_SUBDIR, 'working_proxies.txt')

    print(f"–ü—Ä–æ–∫—Å–∏-—Ñ–∞–π–ª—ã –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∏–∑: {os.path.abspath(proxy_dir)}")
    print(f"–†–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: {os.path.abspath(output_dir)}")
    print(f"  HTTP: {os.path.abspath(HTTP_OUTPUT_SUBDIR)}")
    print(f"  SOCKS4: {os.path.abspath(SOCKS4_OUTPUT_SUBDIR)}")
    print(f"  SOCKS5: {os.path.abspath(SOCKS5_OUTPUT_SUBDIR)}")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {num_threads} –ø–æ—Ç–æ–∫–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º {http_timeout} —Å–µ–∫—É–Ω–¥ (HTTP/S) –∏ {socks_timeout} —Å–µ–∫—É–Ω–¥ (SOCKS).")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–∏–Ω–≥ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {max_ping_ms} –º—Å.")
    print("---")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    if not os.path.exists(proxy_dir):
        print(f"–û—à–∏–±–∫–∞: –ö–∞—Ç–∞–ª–æ–≥ '{proxy_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É —Å –∏–º–µ–Ω–µ–º '{os.path.basename(proxy_dir)}' –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –Ω–µ–µ —Ñ–∞–π–ª—ã .txt —Å –ø—Ä–æ–∫—Å–∏,")
        print(f"–ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å —Å –ø–æ–º–æ—â—å—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞ --input-dir.")
        return

    proxy_files = [f for f in os.listdir(proxy_dir) if f.endswith('.txt') and os.path.isfile(os.path.join(proxy_dir, f))]
    
    if not proxy_files:
        print(f"–§–∞–π–ª—ã .txt —Å –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ '{proxy_dir}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∞—à–∏ —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–∫—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, proxies.txt) –≤ —ç—Ç–æ—Ç –∫–∞—Ç–∞–ª–æ–≥,")
        print(f"–ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å —Å –ø–æ–º–æ—â—å—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞ --input-dir.")
        return

    all_proxies = set()
    print("\n–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–∫—Å–∏ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    for filename in proxy_files:
        filepath = os.path.join(proxy_dir, filename)
        print(f"  –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑: {filepath}")
        try:
            with open(filepath, 'r') as f:
                for line in f:
                    proxy = line.strip()
                    if proxy:
                        all_proxies.add(proxy)
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")

    print(f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_proxies)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏.")

    if not all_proxies:
        print("–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö. –í—ã—Ö–æ–¥.")
        return

    print("\n–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–∫—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    proxy_queue = Queue()
    output_queue = Queue() # –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å (—Ç–∏–ø, –ø—Ä–æ–∫—Å–∏, –ø–∏–Ω–≥)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–∫—Å–∏
    for proxy in all_proxies:
        proxy_queue.put(proxy)

    threads = []
    for _ in range(num_threads):
        t = threading.Thread(target=worker, args=(proxy_queue, output_queue, max_ping_ms, http_timeout, socks_timeout))
        t.start()
        threads.append(t)

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏
    proxy_queue.join()
    print("\n–í—Å–µ –ø—Ä–æ–∫—Å–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –∫–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫
    for _ in range(num_threads):
        proxy_queue.put(None) 
    for t in threads:
        t.join() # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    print("–í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ –ø–æ —Ç–∏–ø–∞–º ---
    working_proxies_by_type = {
        'http': [],
        'socks4': [],
        'socks5': []
    }

    # –°—á–∏—Ç—ã–≤–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö
    def load_existing_proxies(filepath):
        existing_proxies = set()
        if os.path.exists(filepath):
            try:
                with open(filepath, 'r') as f:
                    for line in f:
                        proxy = line.strip()
                        if proxy:
                            existing_proxies.add(proxy)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–∫—Å–∏ –∏–∑ {filepath}: {e}")
        return existing_proxies

    existing_http = load_existing_proxies(OUTPUT_FILE_HTTP)
    existing_socks4 = load_existing_proxies(OUTPUT_FILE_SOCKS4)
    existing_socks5 = load_existing_proxies(OUTPUT_FILE_SOCKS5)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
    while not output_queue.empty():
        proxy_type, proxy_addr, ping = output_queue.get()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–∫—Å–∏ —É–∂–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–∏—Å–∫–∞—Ö
        if proxy_type == 'http' and proxy_addr not in existing_http:
            working_proxies_by_type['http'].append(proxy_addr)
            existing_http.add(proxy_addr) # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        elif proxy_type == 'socks4' and proxy_addr not in existing_socks4:
            working_proxies_by_type['socks4'].append(proxy_addr)
            existing_socks4.add(proxy_addr)
        elif proxy_type == 'socks5' and proxy_addr not in existing_socks5:
            working_proxies_by_type['socks5'].append(proxy_addr)
            existing_socks5.add(proxy_addr)

    total_working_proxies = 0

    # –¢–µ–ø–µ—Ä—å –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–∫—Å–∏ (—Å—Ç–∞—Ä—ã–µ + –Ω–æ–≤—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ) –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª—ã
    for proxy_type, current_session_new_proxies in working_proxies_by_type.items(): # current_session_new_proxies –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
        output_filepath = ''
        all_proxies_for_type = set() # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞

        if proxy_type == 'http':
            output_filepath = OUTPUT_FILE_HTTP
            all_proxies_for_type.update(existing_http)
        elif proxy_type == 'socks4':
            output_filepath = OUTPUT_FILE_SOCKS4
            all_proxies_for_type.update(existing_socks4)
        elif proxy_type == 'socks5':
            output_filepath = OUTPUT_FILE_SOCKS5
            all_proxies_for_type.update(existing_socks5)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        if all_proxies_for_type:
            with open(output_filepath, 'w') as f: # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'w' –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
                for proxy in sorted(list(all_proxies_for_type)): # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ—Ä—è–¥–∫–∞
                    f.write(proxy + '\n')
            
            print(f"\n---")
            print(f"–í—Å–µ–≥–æ {len(all_proxies_for_type)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö {proxy_type.upper()} –ø—Ä–æ–∫—Å–∏ (–≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ).")
            print(f"–†–∞–±–æ—á–∏–µ {proxy_type.upper()} –ø—Ä–æ–∫—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_filepath}")
            total_working_proxies += len(all_proxies_for_type)

    if total_working_proxies == 0:
        print(f"\n---")
        print(f"–†–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ (—Å –ø–∏–Ω–≥–æ–º <= {max_ping_ms} –º—Å).")
    else:
        print(f"\n---")
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {total_working_proxies} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤.")
    
    print("---")
    print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É.")
    print("---")

if __name__ == '__main__':
    main()